/*
My attempts at solving the problems at https://projecteuler.net/.  Most of these are "quick and dirty."
Please attempt to solve on your own before consulting. :)
*/


   /*************/
  /*PROBLEM #1 */
 /*************/
/*
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
*/

function euler1()
{
	var sum = 0;
	for(var i = 1; i < 1000; i++)
	{
		if(i%5 === 0 || i%3 === 0)
		{
			sum+=i;
		}
	}
	return sum;		//233168
}

   /*************/
  /*PROBLEM #2 */
 /*************/
/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

function euler2()
{
	var evenFibs = [];
	var sum = 0;

	//recursively walk through fibonacci sequence
	function Fib(a, b){
		if(b > 4000000) return;
		if(b % 2 == 0 ) evenFibs.push(b);
		c = a+b;
		a = b;
		b = c;
		return Fib (a, b);
	}

	//kick off recursion
	Fib(1, 1);

	//sum even fibonacci terms		//4613732
	return evenFibs.reduce(function(a, b){
		return a + b;		
	});
}

   /*************/
  /*PROBLEM #3 */
 /*************/
/*
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
*/

function euler3(num)
{
	var factors = [];

	function findPrimeFactors(number){

		
		while(number % 2 == 0)
		{
			factors.push(2);
			number/=2;
		}

		//only need to iterate to square root of number - prime factors will not exceed the square root
		//can skip all even numbers other than 2.
		var limit = Math.sqrt(number)
		for(i = 3; i <= limit; i+=2)
		{
			while(number%i == 0)
			{
				factors.push(i);
				number/=i;
			}
		}

		if(number > 2)
		{
			factors.push(number);
		}
	}

	findPrimeFactors(num);

	return factors.pop();		//6857

}

   /*************/
  /*PROBLEM #4 */
 /*************/
/*
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
*/

function euler4()
{

	var palindromes = [];

	//Using 2 for loops from 100 to 999 is O^2.  we can eliminate several iterations by instead doing the following:
	//
	//1)  don't do the same calculation twice.  I.e. don't do i = 300 * j = 700 and then j = 700 * i = 300.
	//    to accomplish this, we can set the inner loop to start at 999 and decrement only to i.


	for(var i = 100; i <= 999; i++)
	{
		for(var j = 999; j > i; j--)
		{
			var temp = (i*j).toString();

			//check if palindrome
			var palindrome = true;
			for(k = 0; k < temp.length; k++)
			{
				if(temp[k] != temp[temp.length-1-k])
				{
					//break if not palindrome
					k = temp.length;
					palindrome = false;
				}
			}
			if(palindrome) palindromes.push(temp);

		}
	}

	return Math.max.apply(Math, palindromes);		//906609
}

   /*************/
  /*PROBLEM #5 */
 /*************/
/*
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
*/

//supes quick and dirty
function euler5()
{
	var n = 2520;
	var notDivisible = true;
	while(notDivisible)
	{
		for(i = 1; i <= 20; i++)
		{
			if(n % i != 0)
			{
				i = 21; //break
			} else if (i == 20 && n % i == 0)
			{
				return n;		//232792560
			}
		}
		n++
	}
}


   /*************/
  /*PROBLEM #6 */
 /*************/
/*
The sum of the squares of the first ten natural numbers is,

1^2 + 2^2 + ... + 10^2 = 385
The square of the sum of the first ten natural numbers is,

(1 + 2 + ... + 10)2 = 55^2 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
*/

function euler6(min, max)
{
	var sumOfSquares = 0;
	var squareOfSums = 0;

	for(i = min; i <= max; i++)
	{
		sumOfSquares += (i*i);
		squareOfSums += i;
	}

	squareOfSums *= squareOfSums;

	return squareOfSums - sumOfSquares;  //euler6(1, 100) = 25164150
										 //euler6(1, 10) = 2640
}


   /*************/
  /*PROBLEM #7 */
 /*************/
/*
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?
*/

//generate n amount of primes
function euler7(n)
{

	var currPrime = 5;
	var primeCount = 2;
	var primes = [2,3]

	while(primes.length < n)
	{
		//assume prime until proven otherwise
		var isPrime = true;
		for(i = 0; i < primes.length; i++)
		{
			if(currPrime % primes[i] == 0){
				isPrime = false;
				i = primes.length;		//break
			}
		}	

		if(isPrime)
		{
			primes.push(currPrime);
		}		
		currPrime++;
	}

	return primes.pop();	//euler7(10001) = 104743
}

   /*************/
  /*PROBLEM #8 */
 /*************/
/*
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
*/

function euler8()
{
	//any 13 digit sequence with a 0 in it will have a product of zero.  Let's begin by splitting the arrays by 0.
	var origNumber =   "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
	var products = [];

	numbers = origNumber.split("0")
		.filter(function(n){
			return n.length >= 13;
		})


	for(number in numbers)
	{
		//some of the numbers may be greater than 13, so need to iterate through all 13-digit combinations within those numbers
		for(var i=0;i<=numbers[number].length-13;i++)
		{
			var tempNum = numbers[number][i];
			for(var j=1;j<13;j++)
			{
				tempNum *= numbers[number][i+j];
			}
			products.push(tempNum);
		}
	}

	return Math.max.apply(Math, products);		//23514624000

}


   /*************/
  /*PROBLEM #9 */
 /*************/
/*
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

a^2 + b^2 = c^2
For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
*/

function euler9(limit)
{
	var trifectas = [];		//it's awesome, baby!

	//skip 1 because 1^2 is 1 and can't be part of a pythagorean triplet
	for(b=3;b<limit;b++)
	{
		a = 2;
		while(a<b)
		{
			var bSq = b * b;		//a^2
			var aSq = a * a;		//b^2
			var cSq = aSq + bSq;		
			
			var c = Math.sqrt(cSq);		//see if c^2, if not, it doesn't meet criteria
			
			if(Number.isInteger(c))
			{
				trifectas.push([a, b, c]);
			}

			a++;		//next iteration
		}
	}

	//filter only sums of 1000
	trifectas = trifectas.filter(function(n){
			return (n[0] + n[1] + n[2] == 1000);		
		})

	//array within array - should only be one item though
	if(trifectas[0]){
		return trifectas[0].reduce(function(a,b){return a*b;});		//trifectas(500) = 31875000
	}
	else{
		return "no match";
	}
}


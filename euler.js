/*
My attempts at solving the problems at https://projecteuler.net/.  Most of these are "quick and dirty."
Please attempt to solve on your own before consulting. :)
*/


   /*************/
  /*PROBLEM #1 */
 /*************/
/*
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
*/

function euler1()
{
	var sum = 0;
	for(var i = 1; i < 1000; i++)
	{
		if(i%5 === 0 || i%3 === 0)
		{
			sum+=i;
		}
	}
	return sum;		//233168
}

   /*************/
  /*PROBLEM #2 */
 /*************/
/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

function euler2()
{
	var evenFibs = [];
	var sum = 0;

	//recursively walk through fibonacci sequence
	function Fib(a, b){
		if(b > 4000000) return;
		if(b % 2 == 0 ) evenFibs.push(b);
		c = a+b;
		a = b;
		b = c;
		return Fib (a, b);
	}

	//kick off recursion
	Fib(1, 1);

	//sum even fibonacci terms		//4613732
	return evenFibs.reduce(function(a, b){
		return a + b;		
	});
}

   /*************/
  /*PROBLEM #3 */
 /*************/
/*
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
*/

function euler3(num)
{
	var factors = [];

	function findPrimeFactors(number){

		
		while(number % 2 == 0)
		{
			factors.push(2);
			number/=2;
		}

		//only need to iterate to square root of number - prime factors will not exceed the square root
		//can skip all even numbers other than 2.
		var limit = Math.sqrt(number)
		for(i = 3; i <= limit; i+=2)
		{
			while(number%i == 0)
			{
				factors.push(i);
				number/=i;
			}
		}

		if(number > 2)
		{
			factors.push(number);
		}
	}

	findPrimeFactors(num);

	return factors.pop();		//6857

}

   /*************/
  /*PROBLEM #4 */
 /*************/
/*
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
*/

function euler4()
{

	var palindromes = [];

	//Using 2 for loops from 100 to 999 is O^2.  we can eliminate several iterations by instead doing the following:
	//
	//1)  don't do the same calculation twice.  I.e. don't do i = 300 * j = 700 and then j = 700 * i = 300.
	//    to accomplish this, we can set the inner loop to start at 999 and decrement only to i.


	for(var i = 100; i <= 999; i++)
	{
		for(var j = 999; j > i; j--)
		{
			var temp = (i*j).toString();

			//check if palindrome
			var palindrome = true;
			for(k = 0; k < temp.length; k++)
			{
				if(temp[k] != temp[temp.length-1-k])
				{
					//break if not palindrome
					k = temp.length;
					palindrome = false;
				}
			}
			if(palindrome) palindromes.push(temp);

		}
	}

	return Math.max.apply(Math, palindromes);		//906609
}

   /*************/
  /*PROBLEM #5 */
 /*************/
/*
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
*/

//supes quick and dirty
function euler5()
{
	var n = 2520;
	var notDivisible = true;
	while(notDivisible)
	{
		for(i = 1; i <= 20; i++)
		{
			if(n % i != 0)
			{
				i = 21; //break
			} else if (i == 20 && n % i == 0)
			{
				return n;		//232792560
			}
		}
		n++
	}
}


   /*************/
  /*PROBLEM #6 */
 /*************/
/*
The sum of the squares of the first ten natural numbers is,

1^2 + 2^2 + ... + 10^2 = 385
The square of the sum of the first ten natural numbers is,

(1 + 2 + ... + 10)2 = 55^2 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
*/

function euler6()
{
	
}



/*
My attempts at solving the problems at https://projecteuler.net/.  Most of these are "quick and dirty."
Please attempt to solve on your own before consulting. :)
*/


   /*************/
  /*PROBLEM #1 */
 /*************/
/*
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
*/

function euler1()
{
	var sum = 0;
	for(var i = 1; i < 1000; i++)
	{
		if(i%5 === 0 || i%3 === 0)
		{
			sum+=i;
		}
	}
	return sum;
}

   /*************/
  /*PROBLEM #2 */
 /*************/
/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

function euler2()
{
	var evenFibs = [];
	var sum = 0;

	//recursively walk through fibonacci sequence
	function Fib(a, b){
		if(b > 4000000) return;
		if(b % 2 == 0 ) evenFibs.push(b);
		c = a+b;
		a = b;
		b = c;
		return Fib (a, b);
	}

	//kick off recursion
	Fib(1, 1);

	//sum even fibonacci terms
	return evenFibs.reduce(function(a, b){
		return a + b;
	});
}

   /*************/
  /*PROBLEM #3 */
 /*************/
/*
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
*/

function euler3(num)
{
	var factors = [];

	function findPrimeFactors(number){

		
		while(number % 2 == 0)
		{
			factors.push(2);
			number/=2;
		}

		//only need to iterate to square root of number - prime factors will not exceed the square root
		//can skip all even numbers other than 2.
		var limit = Math.sqrt(number)
		for(i = 3; i <= limit; i+=2)
		{
			while(number%i == 0)
			{
				factors.push(i);
				number/=i;
			}
		}

		if(number > 2)
		{
			factors.push(number);
		}
	}

	findPrimeFactors(num);

	return factors.pop();

}
